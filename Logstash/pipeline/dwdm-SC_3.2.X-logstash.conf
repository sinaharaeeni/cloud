input {
    syslog {
        port => 5144
        syslog_field => "syslog"
        ecs_compatibility => v1
        grok_pattern => "<%{POSINT:syslog_pri}>%{SYSLOGLINE}"
        type => syslog
    }
    tcp {
        port => 5000 
        codec => json_lines
        type => container
    }
}

filter {
    if [type] == "syslog" {
        mutate { add_field => { "[@metadata][target_index]" => "shelf-%{+YYYY.MM.dd}" } }
        # SC log template
        ## <187>Oct 17 09:16:29 dwdm-86_1_1w HWM[377]: [LMOD]  \e[91mError: Could not change slot byte to 14 (modbus.c:modbus_change_switch:382)\e[0m\n
        mutate { gsub => ["message", "\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]", "" ] }
        grok { match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{USERNAME:[host][name]} %{WORD:syslog_program}(?:\[%{INT:syslog_pid}\])?: %{GREEDYDATA:message}" } overwrite => [ "message" ] }
        syslog_pri {
            ecs_compatibility => disabled
            facility_labels => ["kernel", "user-level", "mail", "system", "security/authorization", "syslogd", "line printer", "network news", "UUCP", "clock", "security/authorization", "FTP", "NTP", "log audit", "log alert", "clock", "local0", "local1", "local2", "local3", "local4", "local5", "local6", "SC APP"]
            }
        grok { match => { "message" => "\[%{WORD:syslog_section}\]  %{GREEDYDATA:message}" } overwrite => [ "message" ] }
        grok { match => { "message" => "\(%{USERNAME:[code][file]}:%{USERNAME:[code][func]}:%{INT:[code][line]}\)" "[host][name]" => "(-%{INT:node}_%{INT:rack}_%{INT:shelf})" } }
        mutate { gsub => [ "message", "\(.*\:.*\:.*\)", "" ]
            convert => { 
                "syslog_pri" => "integer"
                "syslog_pid" => "integer"
                }
                remove_field => ["severity", "priority", "facility", "log"]
                remove_tag => ["_grokparsefailure_sysloginput"]
            }
        translate {
            dictionary_path  => "/usr/share/logstash/config/geoip.yml"
            field => "[node]"
            target => "[location]"
            override => true
        }
        mutate { convert => {
            "node" => "integer"
            "rack" => "integer"
            "shelf" => "integer"
            }
        }
    } else if [type] == "container" {
        mutate { add_field => { "[@metadata][target_index]" => "container-%{+YYYY.MM.dd}" } }
        grok { match => [ "message", "%{GREEDYDATA}" ] }
    } else {
        mutate { add_field => { "[@metadata][target_index]" => "unknown-%{+YYYY.MM.dd}" } }
    }
}

output {
#  stdout {
#    codec => rubydebug {
#      metadata => true
#      }
#    }
	elasticsearch {
        hosts => [ "${XPACK_MONITORING_ELASTICSEARCH_HOSTS}" ]
        user => "${XPACK_MONITORING_ELASTICSEARCH_USERNAME}"
        password => "${XPACK_MONITORING_ELASTICSEARCH_PASSWORD}"
        index => "%{[@metadata][target_index]}"
	}
}
